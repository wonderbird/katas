package decode_morse_code_2_test

import (
	"fmt"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/ginkgo/extensions/table"
	. "github.com/onsi/gomega"
	. "github.com/wonderbird/katas/decode_morse_code_2"
)

var _ = Describe("DecodeBits", func() {
	DescribeTable("Decode single codewords",
		WhenInputThenDecodeBitsReturnsExpected,
		CreateEntryWithAutoGeneratedDescription("1", "."),
		CreateEntryWithAutoGeneratedDescription("010", "."),
		CreateEntryWithAutoGeneratedDescription("11", "."),
	)

	DescribeTable("Decode two codewords",
		WhenInputThenDecodeBitsReturnsExpected,
		CreateEntryWithAutoGeneratedDescription("101", ".."),
		CreateEntryWithAutoGeneratedDescription("110011", ".."),
		CreateEntryWithAutoGeneratedDescription("000111000111000", ".."),
		CreateEntryWithAutoGeneratedDescription("1100111111", ".-"),
	)

	DescribeTable("Decode three codewords",
		WhenInputThenDecodeBitsReturnsExpected,
		CreateEntryWithAutoGeneratedDescription("11001111110011", ".-."),
	)
})

func CreateEntryWithAutoGeneratedDescription(input, expected string) TableEntry {
	return Entry(fmt.Sprintf("%s -> %s", input, expected), input, expected)
}

var _ = Describe("DecodeMorse(DecodeBits) integration test", func() {
	PIt("Codewars: Example from description", func() {
		Expect(DecodeMorse(DecodeBits("1100110011001100000011000000111111001100111111001111110000000000000011001111110011111100111111000000110011001111110000001111110011001100000011"))).To(Equal("HEY JUDE"))
	})
})

func WhenInputThenDecodeBitsReturnsExpected(input, expected string) {
	Expect(DecodeBits(input)).To(Equal(expected))
}
